#!/usr/bin/env ruby
#
#  Created on 2008-1-22.
#  Copyright (c) 2008. All rights reserved.

begin
  require 'rubygems'
rescue LoadError
  # no rubygems to load, so we fail silently
end

require 'optparse'

OPTIONS = {
  :memcache => '127.0.0.1:22122',
  :verbose => false
}
MANDATORY_OPTIONS = %w( image output )

parser = OptionParser.new do |opts|
  opts.banner = <<BANNER
Example client for accessing the resize operation on a remote airbrush server, queued via memcache.

Usage: #{File.basename($0)} [options]

Options are:
BANNER
  opts.separator ""
  opts.on("-m", "--memcache=HOST", String,
          "The address of the memcache host to connect to",
          "Default: #{OPTIONS[:memcache]}") { |OPTIONS[:memcache]| }
  opts.on("-i", "--image=FILENAME", String,
          "Source input image") { |OPTIONS[:image]| }
  opts.on("-o", "--output=FILENAME", String,
          "Target output image") { |OPTIONS[:output]| }
  opts.on("-v", "--verbose",
          "Verbose output") { |OPTIONS[:verbose]| }
  opts.on("-h", "--help",
          "Show this help message.") { puts opts; exit }
  opts.parse!(ARGV)

  if MANDATORY_OPTIONS && MANDATORY_OPTIONS.find { |option| OPTIONS[option.to_sym].nil? }
    puts opts; exit
  end
end

raise "Source image does not exist: #{OPTIONS[:image]}" unless File.exists?(OPTIONS[:image])

# all good, lets go!

require 'airbrush'

client = Airbrush::Client.new(OPTIONS[:memcache])
puts "Sending #{OPTIONS[:image]} for processing"

# previews..
results = client.process('generate-previews', :previews, :image => File.read(OPTIONS[:image]), :filename => OPTIONS[:image], :sizes => {:small => [300], :large => [600]})

results.each do |k,v|
   next if k == :original
   puts v[:format].inspect
   File.open("#{OPTIONS[:output]}-#{k}.jpg", 'w') { |f| f << v[:image] }
   puts "Saved preview #{OPTIONS[:output]}-#{k}.jpg (#{v[:width]}x#{v[:height]})" if OPTIONS[:verbose]
 end

# Exif data..
results = client.process('exif',:exif_data, :image => File.read(OPTIONS[:image]))
puts results.inspect

# resized_crop_mask..
results = client.process('crop-and-resize', 
                           :resized_crop_mask, 
                           :image => File.read(OPTIONS[:image]), 
                           :filename => OPTIONS[:image], 
                           :crop => {:x => 0, :y => 0, :width => 800, :height => 800 },
                           :size => { :width => 2890, :height => 1940 })

File.open("#{OPTIONS[:output]}.jpg", 'w'){|f| f << results[:image] }
puts "Saved resized image #{OPTIONS[:output]}.jpg" if OPTIONS[:verbose]

